#!/usr/bin/env node
/**
 * Script para criar o arquivo manifest.json
 * Este script corrige o erro "Manifest: Line: 1, column: 1, Syntax error"
 */

const fs = require('fs');
const path = require('path');

// Caminho para a pasta public
const publicDir = path.join(__dirname, 'public');

// Conte√∫do do manifest.json
const manifestContent = {
  "name": "CardioAI Pro",
  "short_name": "CardioAI",
  "description": "AI-powered ECG analysis system",
  "theme_color": "#1976d2",
  "background_color": "#ffffff",
  "display": "standalone",
  "start_url": "/",
  "icons": [
    {
      "src": "pwa-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "pwa-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
};

function createManifest() {
  try {
    console.log('üîß Criando arquivo manifest.json...');
    
    // Verificar se a pasta public existe
    if (!fs.existsSync(publicDir)) {
      console.log('üìÅ Criando pasta public...');
      fs.mkdirSync(publicDir, { recursive: true });
    }
    
    // Caminho para o arquivo manifest.json
    const manifestPath = path.join(publicDir, 'manifest.json');
    
    // Verificar se o arquivo j√° existe
    if (fs.existsSync(manifestPath)) {
      console.log('‚ÑπÔ∏è O arquivo manifest.json j√° existe. Substituindo...');
    }
    
    // Escrever o conte√∫do do manifest.json
    fs.writeFileSync(
      manifestPath,
      JSON.stringify(manifestContent, null, 2)
    );
    
    console.log('‚úÖ Arquivo manifest.json criado com sucesso!');
    
    // Criar √≠cones placeholder se n√£o existirem
    createPlaceholderIcons();
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao criar arquivo manifest.json:', error);
    return false;
  }
}

function createPlaceholderIcons() {
  try {
    console.log('üîß Verificando √≠cones PWA...');
    
    // Caminhos para os √≠cones
    const icon192Path = path.join(publicDir, 'pwa-192x192.png');
    const icon512Path = path.join(publicDir, 'pwa-512x512.png');
    
    // Verificar se os √≠cones j√° existem
    if (!fs.existsSync(icon192Path)) {
      console.log('üìù Criando √≠cone placeholder de 192x192...');
      createPlaceholderIcon(icon192Path, 192);
    }
    
    if (!fs.existsSync(icon512Path)) {
      console.log('üìù Criando √≠cone placeholder de 512x512...');
      createPlaceholderIcon(icon512Path, 512);
    }
    
    console.log('‚úÖ √çcones PWA verificados/criados com sucesso.');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar/criar √≠cones PWA:', error);
    return false;
  }
}

// Fun√ß√£o para criar um √≠cone placeholder simples usando Node.js puro
// Esta √© uma solu√ß√£o tempor√°ria - idealmente voc√™ usaria uma biblioteca de manipula√ß√£o de imagens
function createPlaceholderIcon(filePath, size) {
  try {
    // Criar um arquivo de texto com instru√ß√µes
    fs.writeFileSync(
      filePath,
      `Este √© um arquivo placeholder para o √≠cone PWA de ${size}x${size}.
Por favor, substitua este arquivo por uma imagem PNG real de ${size}x${size} pixels.
Voc√™ pode usar ferramentas online como https://realfavicongenerator.net/ para criar √≠cones.`
    );
    
    console.log(`‚úÖ Arquivo placeholder criado em ${filePath}`);
    console.log(`‚ö†Ô∏è IMPORTANTE: Substitua este arquivo por uma imagem PNG real de ${size}x${size} pixels.`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao criar √≠cone placeholder ${size}x${size}:`, error);
    return false;
  }
}

// Executar a cria√ß√£o do manifest
console.log('üöÄ Iniciando cria√ß√£o do manifest.json...');
const success = createManifest();

if (success) {
  console.log('\n‚úÖ Manifest.json e √≠cones placeholder criados com sucesso!');
  console.log('‚ö†Ô∏è IMPORTANTE: Substitua os arquivos de √≠cone placeholder por imagens PNG reais.');
  console.log('üîÑ Execute "npm run dev" para reiniciar o frontend.');
} else {
  console.log('\n‚ö†Ô∏è N√£o foi poss√≠vel criar o manifest.json. Verifique os erros acima.');
}