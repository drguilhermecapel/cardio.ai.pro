// Modern Dashboard Page - CardioAI Pro
// Fusão entre cardiologia e inteligência artificial

import React, { useState, useEffect } from 'react'
import { 
  Grid, 
  Card, 
  CardContent, 
  Typography, 
  Button, 
  Badge, 
  AIGlow,
  HeartbeatIndicator,
  StatusIndicator,
  Box
} from '../components/ui/BasicComponents'
import ModernHeader from '../components/layout/ModernHeader'
import ModernSidebar from '../components/layout/ModernSidebar'
import ModernECGVisualization from '../components/medical/ModernECGVisualization'
import HeartbeatAnimation from '../components/medical/HeartbeatAnimation'
import { ModernPatientCard } from '../components/patient/ModernPatientCard'
import { AIProcessingAnimation, LoadingHeartbeat, ECGPulse } from '../components/animations/MedicalAnimations'
import { useAppDispatch, useAppSelector } from '../hooks/redux'
import { fetchAnalyses } from '../store/slices/ecgSlice'
import { fetchUnreadCount } from '../store/slices/notificationSlice'

// Sample data for demonstration
const sampleECGData = {
  id: 'ecg_001',
  patientName: 'João Silva',
  timestamp: '2024-01-15 14:30:00',
  duration: 10,
  sampleRate: 500,
  leads: {
    'I': [], // Will be generated by the component
    'II': [],
    'III': []
  },
  analysis: {
    heartRate: 75,
    rhythm: 'Sinusal Normal',
    abnormalities: [],
    aiConfidence: 0.95
  }
}

const sampleHeartbeatData = {
  bpm: 75,
  rhythm: 'normal' as const,
  status: 'stable' as const,
  timestamp: '14:30:25'
}

const samplePatients = [
  {
    id: '1',
    name: 'Maria Santos',
    age: 65,
    gender: 'F' as const,
    condition: 'Fibrilação Atrial',
    status: 'monitoring' as const,
    lastECG: '2h atrás',
    heartRate: 88,
    bloodPressure: { systolic: 140, diastolic: 90 },
    riskLevel: 'medium' as const,
    aiInsights: ['Padrão irregular detectado', 'Recomenda-se monitoramento contínuo']
  },
  {
    id: '2',
    name: 'Carlos Oliveira',
    age: 52,
    gender: 'M' as const,
    condition: 'Hipertensão Arterial',
    status: 'stable' as const,
    lastECG: '1h atrás',
    heartRate: 72,
    bloodPressure: { systolic: 130, diastolic: 85 },
    riskLevel: 'low' as const,
    aiInsights: ['Pressão controlada', 'Medicação eficaz']
  },
  {
    id: '3',
    name: 'Ana Costa',
    age: 78,
    gender: 'F' as const,
    condition: 'Insuficiência Cardíaca',
    status: 'critical' as const,
    lastECG: '30min atrás',
    heartRate: 105,
    bloodPressure: { systolic: 160, diastolic: 95 },
    riskLevel: 'critical' as const,
    aiInsights: ['Deterioração detectada', 'Intervenção urgente recomendada']
  }
]

const DashboardPage: React.FC = () => {
  const dispatch = useAppDispatch()
  const { analyses, isLoading } = useAppSelector(state => state.ecg)
  const { unreadCount } = useAppSelector(state => state.notification)
  
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)
  const [realTimeData, setRealTimeData] = useState({
    totalPatients: 156,
    activeMonitoring: 23,
    criticalAlerts: 3,
    aiAnalyses: 89,
    systemLoad: 67
  })

  // Load data
  useEffect(() => {
    dispatch(fetchAnalyses({ limit: 10 }))
    dispatch(fetchUnreadCount())
  }, [dispatch])

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      setRealTimeData(prev => ({
        ...prev,
        activeMonitoring: prev.activeMonitoring + Math.floor(Math.random() * 3) - 1,
        systemLoad: Math.max(0, Math.min(100, prev.systemLoad + Math.floor(Math.random() * 10) - 5))
      }))
    }, 5000)

    return () => clearInterval(interval)
  }, [])

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 flex items-center justify-center">
        <LoadingHeartbeat size="large" message="Carregando dashboard..." />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
      {/* Header */}
      <ModernHeader 
        currentUser={{ name: 'Dr. Silva', role: 'Cardiologista' }}
        notifications={unreadCount}
        systemStatus="online"
      />

      <div className="flex">
        {/* Sidebar */}
        <ModernSidebar 
          isCollapsed={sidebarCollapsed}
          onToggle={() => setSidebarCollapsed(!sidebarCollapsed)}
          currentPath="/dashboard"
        />

        {/* Main Content */}
        <main className="flex-1 p-6 space-y-6">
          
          {/* Welcome Section */}
          <div className="mb-8">
            <Typography variant="h2" className="font-bold text-gray-900 mb-2">
              Dashboard CardioAI Pro
            </Typography>
            <Typography variant="body1" className="text-gray-600">
              Monitoramento inteligente em tempo real • Última atualização: {new Date().toLocaleTimeString()}
            </Typography>
          </div>

          {/* Key Metrics */}
          <Grid container spacing={6} className="mb-8">
            
            {/* Total Patients */}
            <Grid item xs={12} sm={6} lg={3}>
              <Card variant="medical" className="hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <Typography variant="caption" className="text-gray-600 mb-1">
                        Total de Pacientes
                      </Typography>
                      <Typography variant="h3" className="font-bold text-blue-600">
                        {realTimeData.totalPatients}
                      </Typography>
                    </div>
                    <div className="w-12 h-12 bg-gradient-primary rounded-lg flex items-center justify-center">
                      <span className="text-white text-xl">👥</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </Grid>

            {/* Active Monitoring */}
            <Grid item xs={12} sm={6} lg={3}>
              <Card variant="medical" className="hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <Typography variant="caption" className="text-gray-600 mb-1">
                        Monitoramento Ativo
                      </Typography>
                      <Typography variant="h3" className="font-bold text-green-600">
                        {realTimeData.activeMonitoring}
                      </Typography>
                    </div>
                    <div className="w-12 h-12 bg-gradient-secondary rounded-lg flex items-center justify-center">
                      <HeartbeatIndicator className="w-6 h-6" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </Grid>

            {/* Critical Alerts */}
            <Grid item xs={12} sm={6} lg={3}>
              <Card variant="critical" className="hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <Typography variant="caption" className="text-gray-600 mb-1">
                        Alertas Críticos
                      </Typography>
                      <Typography variant="h3" className="font-bold text-red-600">
                        {realTimeData.criticalAlerts}
                      </Typography>
                    </div>
                    <div className="w-12 h-12 bg-gradient-to-r from-red-500 to-orange-500 rounded-lg flex items-center justify-center animate-pulse">
                      <span className="text-white text-xl">🚨</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </Grid>

            {/* AI Analyses */}
            <Grid item xs={12} sm={6} lg={3}>
              <AIGlow active={true}>
                <Card variant="ai" className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <Typography variant="caption" className="text-gray-600 mb-1">
                          Análises IA Hoje
                        </Typography>
                        <Typography variant="h3" className="font-bold text-purple-600">
                          {realTimeData.aiAnalyses}
                        </Typography>
                      </div>
                      <div className="w-12 h-12 bg-gradient-ai rounded-lg flex items-center justify-center">
                        <span className="text-white text-xl">🧠</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </AIGlow>
            </Grid>
          </Grid>

          {/* Main Dashboard Grid */}
          <Grid container spacing={6}>
            
            {/* Left Column */}
            <Grid item xs={12} lg={8}>
              
              {/* ECG Visualization */}
              <div className="mb-6">
                <ModernECGVisualization 
                  data={sampleECGData}
                  selectedLead="II"
                  isRealTime={true}
                  showGrid={true}
                  showAnalysis={true}
                />
              </div>

              {/* Recent Patients */}
              <Card variant="medical">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <Typography variant="h5" className="font-bold text-gray-900">
                      Pacientes Recentes
                    </Typography>
                    <Button variant="outlined" color="primary" size="small">
                      Ver Todos
                    </Button>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {samplePatients.map(patient => (
                      <ModernPatientCard 
                        key={patient.id}
                        patient={patient}
                        onViewDetails={(id) => console.log('View details:', id)}
                        onViewECG={(id) => console.log('View ECG:', id)}
                      />
                    ))}
                  </div>
                </CardContent>
              </Card>
            </Grid>

            {/* Right Column */}
            <Grid item xs={12} lg={4}>
              
              {/* Real-time Heartbeat Monitor */}
              <div className="mb-6">
                <HeartbeatAnimation 
                  data={sampleHeartbeatData}
                  isRealTime={true}
                  showWaveform={true}
                  size="medium"
                />
              </div>

              {/* System Status */}
              <Card variant="medical" className="mb-6">
                <CardContent className="p-6">
                  <Typography variant="h6" className="font-bold text-gray-900 mb-4">
                    Status do Sistema
                  </Typography>
                  
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <StatusIndicator status="online" />
                        <Typography variant="body2" className="text-gray-700">
                          Servidor Principal
                        </Typography>
                      </div>
                      <Badge variant="success">Online</Badge>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <StatusIndicator status="online" />
                        <Typography variant="body2" className="text-gray-700">
                          IA Engine
                        </Typography>
                      </div>
                      <Badge variant="ai">Ativo</Badge>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <StatusIndicator status="warning" />
                        <Typography variant="body2" className="text-gray-700">
                          Carga do Sistema
                        </Typography>
                      </div>
                      <Badge variant="warning">{realTimeData.systemLoad}%</Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* AI Processing */}
              <AIGlow active={true}>
                <Card variant="ai">
                  <CardContent className="p-6">
                    <Typography variant="h6" className="font-bold text-purple-700 mb-4">
                      Processamento IA
                    </Typography>
                    
                    <div className="flex items-center justify-center mb-4">
                      <AIProcessingAnimation 
                        stage="analyzing"
                        progress={75}
                      />
                    </div>
                    
                    <Typography variant="body2" className="text-purple-600 text-center">
                      Analisando padrões cardíacos...
                    </Typography>
                  </CardContent>
                </Card>
              </AIGlow>

              {/* Quick Actions */}
              <Card variant="medical" className="mt-6">
                <CardContent className="p-6">
                  <Typography variant="h6" className="font-bold text-gray-900 mb-4">
                    Ações Rápidas
                  </Typography>
                  
                  <div className="space-y-3">
                    <Button variant="contained" color="primary" className="w-full justify-start">
                      📊 Novo Relatório
                    </Button>
                    <Button variant="outlined" color="secondary" className="w-full justify-start">
                      👤 Adicionar Paciente
                    </Button>
                    <Button variant="outlined" color="ai" className="w-full justify-start">
                      🧠 Análise IA
                    </Button>
                    <Button variant="text" color="primary" className="w-full justify-start">
                      ⚙️ Configurações
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </Grid>
          </Grid>

          {/* Footer Stats */}
          <div className="mt-8 pt-6 border-t border-gray-200">
            <div className="flex items-center justify-center space-x-8">
              <ECGPulse width={100} height={30} isActive={true} />
              <Typography variant="caption" className="text-gray-500">
                CardioAI Pro v2.0 • Sistema operacional há 24h 15min
              </Typography>
              <ECGPulse width={100} height={30} isActive={true} />
            </div>
          </div>
        </main>
      </div>
    </div>
  )
}

export default DashboardPage

