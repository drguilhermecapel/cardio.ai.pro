// Advanced ECG Upload Component with Drag & Drop
// CardioAI Pro - Fus√£o entre cardiologia e intelig√™ncia artificial

import React, { useState, useRef, useCallback } from 'react'
import { 
  Card, 
  CardContent, 
  Typography, 
  Button, 
  Badge,
  AIGlow 
} from '../ui/BasicComponents'
import { AIProcessingAnimation, LoadingHeartbeat } from '../animations/MedicalAnimations'
import ModernECGVisualization from '../medical/ModernECGVisualization'

interface UploadedFile {
  id: string
  name: string
  size: number
  type: string
  lastModified: number
  content?: string
  ecgData?: any
  analysisResult?: {
    heartRate: number
    rhythm: string
    abnormalities: string[]
    aiConfidence: number
    riskLevel: 'low' | 'medium' | 'high' | 'critical'
  }
}

interface ECGUploadProps {
  onFileUploaded?: (file: UploadedFile) => void
  onAnalysisComplete?: (result: any) => void
  maxFileSize?: number // in MB
  acceptedFormats?: string[]
  className?: string
}

export const AdvancedECGUpload: React.FC<ECGUploadProps> = ({
  onFileUploaded,
  onAnalysisComplete,
  maxFileSize = 10,
  acceptedFormats = ['.txt', '.csv', '.xml', '.json'],
  className = ''
}) => {
  const [isDragOver, setIsDragOver] = useState(false)
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisProgress, setAnalysisProgress] = useState(0)
  const [currentAnalysis, setCurrentAnalysis] = useState<string>('')
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Simulate AI analysis process
  const simulateAIAnalysis = async (file: UploadedFile): Promise<any> => {
    setIsAnalyzing(true)
    setAnalysisProgress(0)
    setCurrentAnalysis('Carregando arquivo...')

    // Simulate analysis stages
    const stages = [
      { progress: 20, message: 'Validando formato do arquivo...' },
      { progress: 40, message: 'Extraindo dados ECG...' },
      { progress: 60, message: 'Analisando padr√µes card√≠acos...' },
      { progress: 80, message: 'Aplicando algoritmos de IA...' },
      { progress: 95, message: 'Gerando relat√≥rio...' },
      { progress: 100, message: 'An√°lise conclu√≠da!' }
    ]

    for (const stage of stages) {
      await new Promise(resolve => setTimeout(resolve, 800))
      setAnalysisProgress(stage.progress)
      setCurrentAnalysis(stage.message)
    }

    // Generate mock analysis result
    const result = {
      heartRate: 72 + Math.floor(Math.random() * 30),
      rhythm: ['Sinusal Normal', 'Fibrila√ß√£o Atrial', 'Taquicardia Sinusal'][Math.floor(Math.random() * 3)],
      abnormalities: Math.random() > 0.7 ? ['Extrass√≠stoles ventriculares', 'Prolongamento QT'] : [],
      aiConfidence: 0.85 + Math.random() * 0.14,
      riskLevel: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)] as 'low' | 'medium' | 'high'
    }

    setIsAnalyzing(false)
    return result
  }

  // Handle file processing
  const processFile = async (file: File) => {
    const uploadedFile: UploadedFile = {
      id: Date.now().toString(),
      name: file.name,
      size: file.size,
      type: file.type,
      lastModified: file.lastModified
    }

    // Read file content
    const reader = new FileReader()
    reader.onload = async (e) => {
      uploadedFile.content = e.target?.result as string
      
      // Generate sample ECG data for visualization
      uploadedFile.ecgData = {
        id: uploadedFile.id,
        patientName: 'Paciente ' + uploadedFile.name.split('.')[0],
        timestamp: new Date().toLocaleString(),
        duration: 10,
        sampleRate: 500,
        leads: { 'II': [] }, // Will be generated by component
        analysis: undefined
      }

      setUploadedFiles(prev => [...prev, uploadedFile])
      onFileUploaded?.(uploadedFile)

      // Start AI analysis
      const analysisResult = await simulateAIAnalysis(uploadedFile)
      
      // Update file with analysis
      uploadedFile.analysisResult = analysisResult
      uploadedFile.ecgData.analysis = analysisResult
      
      setUploadedFiles(prev => 
        prev.map(f => f.id === uploadedFile.id ? uploadedFile : f)
      )
      
      onAnalysisComplete?.(analysisResult)
    }
    
    reader.readAsText(file)
  }

  // Drag and drop handlers
  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(true)
  }, [])

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
  }, [])

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
    
    const files = Array.from(e.dataTransfer.files)
    files.forEach(file => {
      if (file.size <= maxFileSize * 1024 * 1024) {
        processFile(file)
      }
    })
  }, [maxFileSize])

  // File input handler
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || [])
    files.forEach(processFile)
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'low': return 'text-green-600'
      case 'medium': return 'text-yellow-600'
      case 'high': return 'text-orange-600'
      case 'critical': return 'text-red-600'
      default: return 'text-gray-600'
    }
  }

  return (
    <div className={`space-y-6 ${className}`}>
      
      {/* Upload Area */}
      <Card variant="medical">
        <CardContent className="p-6">
          <Typography variant="h5" className="font-bold text-gray-900 mb-4">
            Upload de Arquivos ECG
          </Typography>
          
          <div
            className={`
              relative border-2 border-dashed rounded-lg p-8 text-center transition-all duration-300
              ${isDragOver 
                ? 'border-blue-400 bg-blue-50 scale-105' 
                : 'border-gray-300 hover:border-blue-300 hover:bg-gray-50'
              }
            `}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <input
              ref={fileInputRef}
              type="file"
              multiple
              accept={acceptedFormats.join(',')}
              onChange={handleFileSelect}
              className="hidden"
            />
            
            <div className="space-y-4">
              <div className="text-6xl">
                {isDragOver ? 'üì•' : 'üìÅ'}
              </div>
              
              <div>
                <Typography variant="h6" className="text-gray-700 mb-2">
                  {isDragOver 
                    ? 'Solte os arquivos aqui!' 
                    : 'Arraste arquivos ECG ou clique para selecionar'
                  }
                </Typography>
                <Typography variant="body2" className="text-gray-500">
                  Formatos aceitos: {acceptedFormats.join(', ')} ‚Ä¢ M√°ximo: {maxFileSize}MB
                </Typography>
              </div>
              
              <Button
                variant="contained"
                color="primary"
                onClick={() => fileInputRef.current?.click()}
                className="mt-4"
              >
                Selecionar Arquivos
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Analysis Progress */}
      {isAnalyzing && (
        <AIGlow active={true}>
          <Card variant="ai">
            <CardContent className="p-6">
              <div className="flex items-center space-x-4">
                <AIProcessingAnimation 
                  stage="analyzing"
                  progress={analysisProgress}
                />
                <div className="flex-1">
                  <Typography variant="h6" className="font-bold text-purple-700 mb-2">
                    An√°lise de IA em Progresso
                  </Typography>
                  <Typography variant="body2" className="text-purple-600 mb-3">
                    {currentAnalysis}
                  </Typography>
                  <div className="w-full bg-purple-200 rounded-full h-2">
                    <div 
                      className="bg-purple-600 h-2 rounded-full transition-all duration-500"
                      style={{ width: `${analysisProgress}%` }}
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </AIGlow>
      )}

      {/* Uploaded Files */}
      {uploadedFiles.length > 0 && (
        <Card variant="medical">
          <CardContent className="p-6">
            <Typography variant="h5" className="font-bold text-gray-900 mb-4">
              Arquivos Processados ({uploadedFiles.length})
            </Typography>
            
            <div className="space-y-4">
              {uploadedFiles.map(file => (
                <div key={file.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                  
                  {/* File Info */}
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <span className="text-blue-600 text-lg">üìÑ</span>
                      </div>
                      <div>
                        <Typography variant="body1" className="font-medium text-gray-900">
                          {file.name}
                        </Typography>
                        <Typography variant="caption" className="text-gray-500">
                          {formatFileSize(file.size)} ‚Ä¢ {new Date(file.lastModified).toLocaleString()}
                        </Typography>
                      </div>
                    </div>
                    
                    {file.analysisResult && (
                      <Badge 
                        variant={file.analysisResult.riskLevel === 'low' ? 'success' : 
                               file.analysisResult.riskLevel === 'medium' ? 'warning' : 'critical'}
                      >
                        Risco {file.analysisResult.riskLevel.toUpperCase()}
                      </Badge>
                    )}
                  </div>

                  {/* Analysis Results */}
                  {file.analysisResult && (
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                      <div className="bg-red-50 rounded-lg p-3 text-center">
                        <Typography variant="caption" className="text-red-600">
                          Frequ√™ncia Card√≠aca
                        </Typography>
                        <Typography variant="h6" className="font-bold text-red-700">
                          {file.analysisResult.heartRate} bpm
                        </Typography>
                      </div>
                      
                      <div className="bg-blue-50 rounded-lg p-3 text-center">
                        <Typography variant="caption" className="text-blue-600">
                          Ritmo
                        </Typography>
                        <Typography variant="body2" className="font-medium text-blue-700">
                          {file.analysisResult.rhythm}
                        </Typography>
                      </div>
                      
                      <div className="bg-purple-50 rounded-lg p-3 text-center">
                        <Typography variant="caption" className="text-purple-600">
                          Confian√ßa IA
                        </Typography>
                        <Typography variant="h6" className="font-bold text-purple-700">
                          {(file.analysisResult.aiConfidence * 100).toFixed(1)}%
                        </Typography>
                      </div>
                      
                      <div className="bg-gray-50 rounded-lg p-3 text-center">
                        <Typography variant="caption" className="text-gray-600">
                          Anormalidades
                        </Typography>
                        <Typography variant="body2" className="font-medium text-gray-700">
                          {file.analysisResult.abnormalities.length || 'Nenhuma'}
                        </Typography>
                      </div>
                    </div>
                  )}

                  {/* ECG Visualization */}
                  {file.ecgData && (
                    <div className="mt-4">
                      <ModernECGVisualization 
                        data={file.ecgData}
                        selectedLead="II"
                        isRealTime={false}
                        showGrid={true}
                        showAnalysis={true}
                        className="h-64"
                      />
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

export default AdvancedECGUpload

