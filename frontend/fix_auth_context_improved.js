#!/usr/bin/env node
/**
 * Script aprimorado para corrigir o problema de contexto de autentica√ß√£o no frontend
 * Este script corrige o erro "useAuth must be used within an AuthProvider"
 * e garante que todas as depend√™ncias estejam corretamente configuradas
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Caminho para os arquivos
const useAuthPath = path.join(__dirname, 'src', 'hooks', 'useAuth.ts');
const appTsxPath = path.join(__dirname, 'src', 'App.tsx');
const authContextPath = path.join(__dirname, 'src', 'contexts', 'AuthContext.tsx');
const authContextDefPath = path.join(__dirname, 'src', 'contexts', 'AuthContextDefinition.ts');
const mainTsxPath = path.join(__dirname, 'src', 'main.tsx');

// Verifica se um arquivo existe
function fileExists(filePath) {
  try {
    return fs.existsSync(filePath);
  } catch (error) {
    return false;
  }
}

// Cria um backup de um arquivo
function createBackup(filePath) {
  try {
    if (fileExists(filePath)) {
      const backupPath = `${filePath}.backup`;
      fs.copyFileSync(filePath, backupPath);
      console.log(`üì¶ Backup criado: ${backupPath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå Erro ao criar backup de ${filePath}:`, error);
    return false;
  }
}

// Restaura um backup
function restoreBackup(filePath) {
  try {
    const backupPath = `${filePath}.backup`;
    if (fileExists(backupPath)) {
      fs.copyFileSync(backupPath, filePath);
      console.log(`üîÑ Arquivo restaurado do backup: ${filePath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå Erro ao restaurar backup de ${filePath}:`, error);
    return false;
  }
}

// Cria backups de todos os arquivos
function createBackups() {
  createBackup(useAuthPath);
  createBackup(appTsxPath);
  createBackup(authContextPath);
  createBackup(authContextDefPath);
  createBackup(mainTsxPath);
}

function fixUseAuthHook() {
  try {
    console.log('üîß Corrigindo hook useAuth...');
    
    if (!fileExists(useAuthPath)) {
      console.error(`‚ùå Arquivo n√£o encontrado: ${useAuthPath}`);
      return false;
    }
    
    // Ler o conte√∫do do arquivo useAuth.ts
    let useAuthContent = fs.readFileSync(useAuthPath, 'utf8');
    
    // Verificar qual importa√ß√£o est√° sendo usada
    const usesAuthContextDef = useAuthContent.includes("from '../contexts/AuthContextDefinition'");
    const usesAuthContext = useAuthContent.includes("from '../contexts/AuthContext'");
    
    if (usesAuthContextDef) {
      // Substituir a importa√ß√£o incorreta pela correta
      useAuthContent = useAuthContent.replace(
        "import { AuthContext } from '../contexts/AuthContextDefinition'",
        "import { AuthContext } from '../contexts/AuthContext'"
      );
      
      useAuthContent = useAuthContent.replace(
        "import type { AuthContextType } from '../contexts/AuthContextDefinition'",
        "import type { AuthContextType } from '../contexts/AuthContext'"
      );
      
      // Salvar as altera√ß√µes
      fs.writeFileSync(useAuthPath, useAuthContent);
      console.log('‚úÖ Hook useAuth corrigido com sucesso!');
    } else if (usesAuthContext) {
      console.log('‚ÑπÔ∏è Hook useAuth j√° est√° usando a importa√ß√£o correta.');
    } else {
      // Caso o padr√£o de importa√ß√£o seja diferente
      console.log('‚ö†Ô∏è Padr√£o de importa√ß√£o n√£o reconhecido em useAuth.ts. Tentando corrigir...');
      
      // Substituir qualquer importa√ß√£o de contexto
      useAuthContent = useAuthContent.replace(
        /import\s+\{\s*AuthContext\s*\}\s+from\s+['"](.*)['"];?/,
        "import { AuthContext } from '../contexts/AuthContext';"
      );
      
      useAuthContent = useAuthContent.replace(
        /import\s+type\s+\{\s*AuthContextType\s*\}\s+from\s+['"](.*)['"];?/,
        "import type { AuthContextType } from '../contexts/AuthContext';"
      );
      
      // Salvar as altera√ß√µes
      fs.writeFileSync(useAuthPath, useAuthContent);
      console.log('‚úÖ Hook useAuth corrigido com sucesso (padr√£o n√£o reconhecido)!');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao corrigir hook useAuth:', error);
    return false;
  }
}

function fixAppComponent() {
  try {
    console.log('üîß Corrigindo componente App...');
    
    if (!fileExists(appTsxPath)) {
      console.error(`‚ùå Arquivo n√£o encontrado: ${appTsxPath}`);
      return false;
    }
    
    // Ler o conte√∫do do arquivo App.tsx
    let appContent = fs.readFileSync(appTsxPath, 'utf8');
    
    // Verificar se o componente App est√° usando useAuth
    if (appContent.includes('const { isAuthenticated } = useAuth()') || 
        appContent.includes('useAuth()')) {
      
      // Verificar se o useAuth est√° sendo importado
      if (!appContent.includes("import { useAuth }")) {
        // Adicionar a importa√ß√£o do useAuth
        if (appContent.includes("import { useState, useEffect }")) {
          appContent = appContent.replace(
            "import { useState, useEffect }",
            "import { useState, useEffect }\nimport { useAuth } from './hooks/useAuth'"
          );
        } else if (appContent.includes("import React")) {
          appContent = appContent.replace(
            "import React",
            "import React\nimport { useAuth } from './hooks/useAuth'"
          );
        } else {
          // Adicionar no in√≠cio do arquivo
          appContent = "import { useAuth } from './hooks/useAuth';\n" + appContent;
        }
        
        // Salvar as altera√ß√µes
        fs.writeFileSync(appTsxPath, appContent);
        console.log('‚úÖ Componente App corrigido com sucesso!');
      } else {
        console.log('‚ÑπÔ∏è Componente App j√° tem a importa√ß√£o de useAuth.');
      }
    } else {
      console.log('‚ÑπÔ∏è Componente App n√£o parece usar useAuth diretamente.');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao corrigir componente App:', error);
    return false;
  }
}

function fixAuthContext() {
  try {
    console.log('üîß Corrigindo AuthContext...');
    
    if (!fileExists(authContextPath)) {
      console.error(`‚ùå Arquivo n√£o encontrado: ${authContextPath}`);
      return false;
    }
    
    // Ler o conte√∫do do arquivo AuthContext.tsx
    let authContextContent = fs.readFileSync(authContextPath, 'utf8');
    
    let modified = false;
    
    // Verificar se o AuthContext j√° est√° sendo exportado
    if (!authContextContent.includes('export const AuthContext')) {
      // Substituir a declara√ß√£o do AuthContext para export√°-lo
      authContextContent = authContextContent.replace(
        /const\s+AuthContext\s*=\s*createContext<AuthContextType\s*\|\s*undefined>\(undefined\)/,
        'export const AuthContext = createContext<AuthContextType | undefined>(undefined)'
      );
      modified = true;
    }
    
    // Verificar se o tipo AuthContextType est√° sendo exportado
    if (!authContextContent.includes('export interface AuthContextType')) {
      // Adicionar exporta√ß√£o do tipo AuthContextType
      authContextContent = authContextContent.replace(
        /interface\s+AuthContextType\s+extends\s+AuthState\s*\{/,
        'export interface AuthContextType extends AuthState {'
      );
      modified = true;
    }
    
    if (modified) {
      // Salvar as altera√ß√µes
      fs.writeFileSync(authContextPath, authContextContent);
      console.log('‚úÖ AuthContext corrigido com sucesso!');
    } else {
      console.log('‚ÑπÔ∏è AuthContext j√° est√° configurado corretamente.');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao corrigir AuthContext:', error);
    return false;
  }
}

function fixMainTsx() {
  try {
    console.log('üîß Verificando main.tsx...');
    
    if (!fileExists(mainTsxPath)) {
      console.error(`‚ùå Arquivo n√£o encontrado: ${mainTsxPath}`);
      return false;
    }
    
    // Ler o conte√∫do do arquivo main.tsx
    let mainContent = fs.readFileSync(mainTsxPath, 'utf8');
    
    // Verificar se o AppWithAuth est√° sendo usado
    if (mainContent.includes('<AppWithAuth />')) {
      console.log('‚ÑπÔ∏è main.tsx j√° est√° usando AppWithAuth corretamente.');
      return true;
    }
    
    // Se estiver usando App diretamente, substituir por AppWithAuth
    if (mainContent.includes('<App />')) {
      mainContent = mainContent.replace(
        '<App />',
        '<AppWithAuth />'
      );
      
      // Atualizar a importa√ß√£o
      mainContent = mainContent.replace(
        /import\s+App\s+from\s+['"]\.\/App['"];?/,
        "import AppWithAuth from './App';"
      );
      
      // Salvar as altera√ß√µes
      fs.writeFileSync(mainTsxPath, mainContent);
      console.log('‚úÖ main.tsx corrigido para usar AppWithAuth!');
    } else {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel identificar o padr√£o em main.tsx. Verifique manualmente.');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar main.tsx:', error);
    return false;
  }
}

function copyAuthContextDefinitionToAuthContext() {
  try {
    console.log('üîß Verificando se √© necess√°rio copiar defini√ß√µes de AuthContextDefinition...');
    
    // Verificar se ambos os arquivos existem
    if (fileExists(authContextDefPath) && fileExists(authContextPath)) {
      // Ler o conte√∫do dos arquivos
      const defContent = fs.readFileSync(authContextDefPath, 'utf8');
      let authContent = fs.readFileSync(authContextPath, 'utf8');
      
      // Verificar se h√° tipos no AuthContextDefinition que precisam ser copiados
      if (defContent.includes('export interface AuthContextType')) {
        console.log('‚ö†Ô∏è AuthContextDefinition.ts cont√©m defini√ß√µes de tipos que podem ser necess√°rias.');
        console.log('‚ÑπÔ∏è Considere verificar manualmente se todos os tipos necess√°rios est√£o em AuthContext.tsx');
      } else {
        console.log('‚ÑπÔ∏è N√£o parece haver tipos exclusivos em AuthContextDefinition.ts');
      }
      
      return true;
    } else if (!fileExists(authContextDefPath)) {
      console.log('‚ÑπÔ∏è Arquivo AuthContextDefinition.ts n√£o encontrado, n√£o √© necess√°rio copiar defini√ß√µes.');
      return true;
    } else {
      console.error('‚ùå Arquivo AuthContext.tsx n√£o encontrado!');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar defini√ß√µes de contexto:', error);
    return false;
  }
}

function verifyAllFiles() {
  console.log('üîç Verificando a exist√™ncia de todos os arquivos necess√°rios...');
  
  const files = [
    { path: useAuthPath, name: 'useAuth.ts' },
    { path: appTsxPath, name: 'App.tsx' },
    { path: authContextPath, name: 'AuthContext.tsx' },
    { path: mainTsxPath, name: 'main.tsx' }
  ];
  
  let allFilesExist = true;
  
  files.forEach(file => {
    if (fileExists(file.path)) {
      console.log(`‚úÖ ${file.name} encontrado.`);
    } else {
      console.error(`‚ùå ${file.name} n√£o encontrado em ${file.path}`);
      allFilesExist = false;
    }
  });
  
  return allFilesExist;
}

function runNpmInstall() {
  try {
    console.log('üîß Verificando depend√™ncias do projeto...');
    
    // Verificar se o package.json existe
    const packageJsonPath = path.join(__dirname, 'package.json');
    if (!fileExists(packageJsonPath)) {
      console.error('‚ùå package.json n√£o encontrado!');
      return false;
    }
    
    console.log('üì¶ Instalando depend√™ncias do projeto...');
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ Depend√™ncias instaladas com sucesso!');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao instalar depend√™ncias:', error);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ Iniciando corre√ß√£o aprimorada do contexto de autentica√ß√£o...');
  
  // Verificar arquivos
  if (!verifyAllFiles()) {
    console.error('‚ùå Alguns arquivos necess√°rios n√£o foram encontrados. Abortando...');
    return false;
  }
  
  // Criar backups
  console.log('üì¶ Criando backups dos arquivos...');
  createBackups();
  
  try {
    // Executar todas as corre√ß√µes
    const authContextFixed = fixAuthContext();
    const useAuthFixed = fixUseAuthHook();
    const appFixed = fixAppComponent();
    const mainFixed = fixMainTsx();
    const definitionsChecked = copyAuthContextDefinitionToAuthContext();
    
    // Verificar se todas as corre√ß√µes foram bem-sucedidas
    if (authContextFixed && useAuthFixed && appFixed && mainFixed && definitionsChecked) {
      console.log('‚úÖ Todas as corre√ß√µes foram aplicadas com sucesso!');
      
      // Instalar depend√™ncias
      const depsInstalled = runNpmInstall();
      
      if (depsInstalled) {
        console.log('\nüéâ Configura√ß√£o conclu√≠da! Execute "npm run dev" para iniciar o frontend.');
        console.log('üìù Se ainda encontrar problemas, verifique os arquivos manualmente ou restaure os backups.');
        return true;
      } else {
        console.warn('‚ö†Ô∏è Corre√ß√µes aplicadas, mas houve problemas ao instalar depend√™ncias.');
        return false;
      }
    } else {
      console.error('‚ùå Algumas corre√ß√µes n√£o puderam ser aplicadas.');
      console.log('‚ö†Ô∏è Voc√™ pode tentar restaurar os backups usando a op√ß√£o --restore.');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro durante o processo de corre√ß√£o:', error);
    console.log('‚ö†Ô∏è Restaurando backups...');
    
    // Restaurar backups em caso de erro
    restoreBackup(useAuthPath);
    restoreBackup(appTsxPath);
    restoreBackup(authContextPath);
    restoreBackup(authContextDefPath);
    restoreBackup(mainTsxPath);
    
    return false;
  }
}

// Verificar se o usu√°rio quer restaurar backups
if (process.argv.includes('--restore')) {
  console.log('üîÑ Restaurando backups...');
  restoreBackup(useAuthPath);
  restoreBackup(appTsxPath);
  restoreBackup(authContextPath);
  restoreBackup(authContextDefPath);
  restoreBackup(mainTsxPath);
  console.log('‚úÖ Processo de restaura√ß√£o conclu√≠do.');
} else {
  // Executar o script principal
  main().then(success => {
    if (success) {
      console.log('‚úÖ Script conclu√≠do com sucesso!');
    } else {
      console.error('‚ùå Script conclu√≠do com erros.');
      console.log('üí° Voc√™ pode restaurar os backups executando: node fix_auth_context_improved.js --restore');
    }
  });
}