name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: cardioai_test
          POSTGRES_USER: cardioai_test
          POSTGRES_DB: cardioai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./backend
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      working-directory: ./backend
      run: poetry install --no-interaction
    
    - name: Run ruff linting
      working-directory: ./backend
      run: poetry run ruff check app/
    
    - name: Run mypy type checking
      working-directory: ./backend
      run: poetry run mypy app/ --strict
    
    - name: Run pytest with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://cardioai_test:cardioai_test@localhost:5432/cardioai_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        poetry run pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run Prettier check
      working-directory: ./frontend
      run: npm run format:check
    
    - name: Run TypeScript check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: cardioai-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: cardioai-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Check image sizes
      run: |
        backend_size=$(docker images cardioai-backend:test --format "table {{.Size}}" | tail -n 1)
        frontend_size=$(docker images cardioai-frontend:test --format "table {{.Size}}" | tail -n 1)
        echo "Backend image size: $backend_size"
        echo "Frontend image size: $frontend_size"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        ENVIRONMENT=test
        DATABASE_URL=postgresql://cardioai:cardioai_password@postgres:5432/cardioai
        REDIS_URL=redis://redis:6379/0
        SECRET_KEY=test-secret-key-for-integration
        CELERY_BROKER_URL=redis://redis:6379/0
        CELERY_RESULT_BACKEND=redis://redis:6379/0
        EOF
    
    - name: Start services with Docker Compose
      run: |
        cp .env.test .env
        docker-compose up -d --build
        sleep 30
    
    - name: Wait for services to be healthy
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
    
    - name: Run API integration tests
      run: |
        docker-compose exec -T api python -m pytest tests/integration/ -v
    
    - name: Check service logs
      if: failure()
      run: |
        echo "=== API Logs ==="
        docker-compose logs api
        echo "=== Frontend Logs ==="
        docker-compose logs frontend
        echo "=== Database Logs ==="
        docker-compose logs postgres
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        token: ${{ secrets.GITHUB_TOKEN }}
