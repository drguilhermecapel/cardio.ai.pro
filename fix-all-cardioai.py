#!/usr/bin/env python3
"""
Script √∫nico para corrigir TODOS os problemas de teste do CardioAI Pro.
Execute este arquivo e ele resolver√° tudo automaticamente.
"""

import os
import sys
import subprocess
from pathlib import Path

def main():
    print("=" * 70)
    print("CARDIOAI PRO - CORRE√á√ÉO COMPLETA DE TESTES".center(70))
    print("=" * 70)
    
    # Verificar diret√≥rio
    if not Path("backend").exists():
        print("\n‚ùå ERRO: Execute este script no diret√≥rio raiz do CardioAI Pro!")
        print(f"üìç Diret√≥rio atual: {os.getcwd()}")
        print("\nüìÅ Navegue at√©: C:\\Users\\User\\OneDrive\\Documentos\\GitHub\\cardio.ai.pro")
        return
        
    print("\n‚úÖ Diret√≥rio correto detectado!")
    
    # 1. Criar estrutura de testes
    print("\nüìÅ Criando estrutura de testes...")
    tests_dir = Path("backend/tests")
    tests_dir.mkdir(exist_ok=True)
    (tests_dir / "__init__.py").touch()
    
    # 2. Adicionar exce√ß√µes faltantes
    print("üîß Adicionando exce√ß√µes faltantes...")
    exceptions_file = Path("backend/app/core/exceptions.py")
    
    if exceptions_file.exists():
        with open(exceptions_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if "MultiPathologyException" not in content:
            with open(exceptions_file, 'a', encoding='utf-8') as f:
                f.write('''

# Exce√ß√µes adicionadas automaticamente
class MultiPathologyException(CardioAIException):
    """Exception for multi-pathology service errors."""
    
    def __init__(self, message: str, pathologies: list[str] | None = None) -> None:
        details = {"pathologies": pathologies} if pathologies else {}
        super().__init__(
            message=message,
            error_code="MULTI_PATHOLOGY_ERROR",
            status_code=500,
            details=details,
        )

class ECGReaderException(CardioAIException):
    """Exception for ECG file reading errors."""
    
    def __init__(self, message: str, file_format: str | None = None) -> None:
        details = {"file_format": file_format} if file_format else {}
        super().__init__(
            message=message,
            error_code="ECG_READER_ERROR",
            status_code=422,
            details=details,
        )
''')
            print("  ‚úÖ MultiPathologyException adicionada")
            print("  ‚úÖ ECGReaderException adicionada")
    
    # 3. Criar conftest.py com mocks
    print("\nüîß Criando configura√ß√£o de testes com mocks...")
    conftest_content = '''"""Configura√ß√£o de testes - CardioAI Pro"""

import sys
import os
from unittest.mock import MagicMock

# Ambiente de teste
os.environ["ENVIRONMENT"] = "test"
os.environ["DATABASE_URL"] = "sqlite+aiosqlite:///:memory:"
os.environ["SECRET_KEY"] = "test-secret-key"
os.environ["ALGORITHM"] = "HS256"

# Mock pyedflib (evita erro de instala√ß√£o no Windows)
mock_pyedflib = MagicMock()
mock_pyedflib.EdfReader = MagicMock
mock_pyedflib.EdfWriter = MagicMock
mock_pyedflib.highlevel = MagicMock()
mock_pyedflib.highlevel.read_edf = MagicMock(return_value=([], None, None))
sys.modules["pyedflib"] = mock_pyedflib

# Mock outros m√≥dulos opcionais
sys.modules["redis"] = MagicMock()
sys.modules["celery"] = MagicMock()
sys.modules["minio"] = MagicMock()

print("‚úÖ Mocks configurados para testes")
'''
    
    with open(tests_dir / "conftest.py", 'w', encoding='utf-8') as f:
        f.write(conftest_content)
    print("  ‚úÖ conftest.py criado com mocks")
    
    # 4. Criar teste b√°sico para verificar
    print("\nüîß Criando testes b√°sicos...")
    basic_test = '''"""Teste b√°sico para verificar configura√ß√£o"""

def test_environment_setup():
    """Verifica se o ambiente est√° configurado."""
    import os
    assert os.environ.get("ENVIRONMENT") == "test"
    assert os.environ.get("SECRET_KEY") is not None
    
def test_imports():
    """Verifica se imports b√°sicos funcionam."""
    from app.core.config import settings
    from app.core.constants import UserRoles
    from app.core.exceptions import CardioAIException, MultiPathologyException
    
    assert settings is not None
    assert UserRoles.ADMIN is not None
    assert MultiPathologyException is not None
    
def test_pyedflib_mock():
    """Verifica se o mock do pyedflib funciona."""
    import pyedflib
    assert pyedflib is not None
    assert hasattr(pyedflib, 'EdfReader')
'''
    
    with open(tests_dir / "test_basic_setup.py", 'w', encoding='utf-8') as f:
        f.write(basic_test)
    print("  ‚úÖ Teste b√°sico criado")
    
    # 5. Instalar depend√™ncias essenciais
    print("\nüì¶ Instalando depend√™ncias de teste...")
    essential_deps = ["pytest", "pytest-asyncio", "pytest-cov", "aiosqlite"]
    
    for dep in essential_deps:
        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "install", dep],
                capture_output=True,
                check=True
            )
            print(f"  ‚úÖ {dep} instalado")
        except:
            print(f"  ‚ö†Ô∏è  {dep} - verificar manualmente")
    
    # 6. Criar script de execu√ß√£o
    print("\nüìù Criando script de execu√ß√£o...")
    run_script = '''@echo off
echo ========================================
echo EXECUTANDO TESTES CARDIOAI PRO
echo ========================================

cd backend
set PYTHONPATH=%CD%

echo.
echo Executando teste basico...
python -m pytest tests/test_basic_setup.py -v

echo.
echo Executando todos os testes com cobertura...
python -m pytest --cov=app --cov-report=html --cov-report=term-missing -v --tb=short

echo.
echo ========================================
echo TESTES CONCLUIDOS!
echo Relatorio HTML: backend\htmlcov\index.html
echo ========================================
pause
'''
    
    with open("run_cardioai_tests.bat", 'w') as f:
        f.write(run_script)
    print("  ‚úÖ Script run_cardioai_tests.bat criado")
    
    # 7. Instru√ß√µes finais
    print("\n" + "=" * 70)
    print("‚úÖ CORRE√á√ïES APLICADAS COM SUCESSO!".center(70))
    print("=" * 70)
    
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("\n1. Execute o comando de teste:")
    print("   > run_cardioai_tests.bat")
    print("\n2. Ou execute manualmente:")
    print("   > cd backend")
    print("   > python -m pytest -v")
    print("\n3. Para cobertura completa:")
    print("   > python -m pytest --cov=app --cov-report=html -v")
    
    print("\nüìä RESULTADOS ESPERADOS:")
    print("   ‚Ä¢ Testes b√°sicos devem passar ‚úÖ")
    print("   ‚Ä¢ Erros de pyedflib resolvidos ‚úÖ")
    print("   ‚Ä¢ MultiPathologyException dispon√≠vel ‚úÖ")
    print("   ‚Ä¢ Cobertura pode come√ßar baixa (normal)")
    
    print("\nüí° DICA: Para aumentar a cobertura, execute:")
    print("   > python create_critical_tests.py")
    print("   (ap√≥s verificar que os testes b√°sicos funcionam)")
    
    print("\n" + "=" * 70)

if __name__ == "__main__":
    main()
