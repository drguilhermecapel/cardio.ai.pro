from typing import Any

import numpy as np
import numpy.typing as npt

class EdfReader:
    def __init__(self, file_name: str, mode: str = 'r') -> None: ...
    def getNSamples(self) -> list[int]: ...
    def getSignalLabels(self) -> list[str]: ...
    def getSampleFrequency(self, channel: int) -> float: ...
    def readSignal(self, channel: int, start: int = 0, n: int | None = None) -> npt.NDArray[np.float64]: ...
    def close(self) -> None: ...
    def __enter__(self) -> EdfReader: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

class EdfWriter:
    def __init__(self, file_name: str, n_channels: int, file_type: int = 1) -> None: ...
    def setSignalHeader(self, edfsignal: int, label: str, dimension: str, sample_rate: int,
                       physical_max: float, physical_min: float, digital_max: int, digital_min: int) -> None: ...
    def writePhysicalSamples(self, data: npt.NDArray[np.float64]) -> None: ...
    def close(self) -> None: ...
    def __enter__(self) -> EdfWriter: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

def highlevel_read_edf(edf_file: str, ch_nrs: list[int] | None = None,
                      ch_names: list[str] | None = None, digital: bool = False,
                      verbose: bool = False) -> tuple[npt.NDArray[np.float64], list[str], dict[str, Any]]: ...
