[tool.poetry]
name = "cardioai-pro-backend"
version = "1.0.0"
description = "CardioAI Pro - Backend API para an√°lise de ECG com IA"
authors = ["CardioAI Team <team@cardioai.pro>"]
license = "Proprietary"
readme = "README.md"
packages = [{include = "app"}]
homepage = "https://cardioai.pro"
repository = "https://github.com/cardioai/cardio.ai.pro"
keywords = ["ecg", "cardiology", "ai", "medical", "healthcare"]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.110.3"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
sqlalchemy = "^2.0.25"
alembic = "^1.13.1"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
asyncpg = "^0.29.0"
redis = "^5.0.1"
celery = "^5.3.4"
httpx = "^0.26.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.20"
email-validator = "^2.1.0"
numpy = "^1.26.3"
pandas = "^2.1.4"
scikit-learn = "^1.3.2"
tensorflow = "^2.15.0"
neurokit2 = "^0.2.7"
scipy = "^1.11.4"
matplotlib = "^3.8.2"
seaborn = "^0.13.1"
plotly = "^5.18.0"
opencv-python = "^4.9.0"
Pillow = "^10.2.0"
boto3 = "^1.34.15"
psutil = "^6.0.0"
python-dotenv = "^1.0.0"
pyyaml = "^6.0.1"
click = "^8.1.7"
rich = "^13.7.0"
tenacity = "^8.2.3"
structlog = "^24.1.0"
prometheus-client = "^0.19.0"
sentry-sdk = {extras = ["fastapi"], version = "^1.39.2"}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-timeout = "^2.2.0"
pytest-env = "^1.1.3"
radon = "^6.0.1"
bandit = {extras = ["toml"], version = "^1.7.6"}
pip-audit = "^2.7.0"
black = "^24.1.1"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.8.0"
factory-boy = "^3.3.0"
faker = "^22.0.0"
coverage = {extras = ["toml"], version = "^7.4.0"}
pre-commit = "^3.6.0"
watchdog = "^3.0.0"
ipython = "^8.20.0"
ipdb = "^0.13.13"
types-python-jose = "^3.3.4"
types-passlib = "^1.7.7"
types-python-dateutil = "^2.8.19"
types-pyyaml = "^6.0.12"
types-redis = "^4.6.0"
types-requests = "^2.31.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "medical: marks tests as medical component tests",
    "critical: marks tests as critical component tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/config.py",
    "*/conftest.py",
    "*/versions/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "except ImportError:",
    "except KeyError:",
    "except NameError:",
    "pass",
]

[tool.coverage.html]
directory = "htmlcov"
title = "CardioAI Pro - Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
targets = ["app"]
exclude_dirs = ["tests", "migrations", ".venv", "venv"]
severity = "medium"
confidence = "medium"
skips = ["B101", "B601", "B104"]
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "pydantic.*",
    "sqlalchemy.*",
    "alembic.*",
    "pytest.*",
    "httpx.*",
    "redis.*",
    "celery.*",
    "neurokit2.*",
    "scipy.*",
    "sklearn.*",
    "tensorflow.*",
    "cv2.*",
    "PIL.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "boto3.*",
    "prometheus_client.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
skip_gitignore = true
skip = ["migrations", ".venv", "venv"]
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | migrations
  | htmlcov
  | node_modules
  | __pycache__
)/
'''

[tool.ruff]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DJ",  # flake8-django
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
line-length = 100
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "ARG", "FBT", "PLR2004", "S"]

[tool.poetry.scripts]
cardioai = "app.cli:cli"
start-api = "app.main:start"
test = "pytest:main"
