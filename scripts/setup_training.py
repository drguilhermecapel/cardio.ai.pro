#!/usr/bin/env python3
"""
Script de configura√ß√£o do ambiente de treinamento para cardio.ai.pro
Compat√≠vel com Windows, Linux e macOS
"""

import os
import sys
import subprocess
import platform
from pathlib import Path
import shutil
import json

def check_python_version():
    """Verifica se a vers√£o do Python √© adequada"""
    print("üîç Verificando vers√£o do Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} detectado. Python 3.8+ √© necess√°rio.")
        sys.exit(1)
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado")

def create_directories():
    """Cria estrutura de diret√≥rios necess√°ria"""
    print("\nüìÅ Criando estrutura de diret√≥rios...")
    
    base_dir = Path(__file__).parent.parent
    directories = [
        "data/raw",
        "data/processed",
        "data/features",
        "models/checkpoints",
        "models/trained",
        "logs/training",
        "logs/evaluation",
        "outputs/predictions",
        "outputs/reports",
        "configs/model",
        "configs/training"
    ]
    
    for dir_path in directories:
        full_path = base_dir / dir_path
        full_path.mkdir(parents=True, exist_ok=True)
        print(f"   ‚úì {dir_path}")

def create_venv():
    """Cria ambiente virtual Python"""
    print("\nüêç Configurando ambiente virtual...")
    
    venv_path = Path(__file__).parent.parent / "venv"
    
    if venv_path.exists():
        print("   ‚ÑπÔ∏è  Ambiente virtual j√° existe")
        return venv_path
    
    try:
        subprocess.run([sys.executable, "-m", "venv", str(venv_path)], check=True)
        print("   ‚úì Ambiente virtual criado")
        return venv_path
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Erro ao criar ambiente virtual: {e}")
        sys.exit(1)

def get_pip_command(venv_path):
    """Retorna o comando pip apropriado para o SO"""
    if platform.system() == "Windows":
        return str(venv_path / "Scripts" / "pip.exe")
    else:
        return str(venv_path / "bin" / "pip")

def get_python_command(venv_path):
    """Retorna o comando python apropriado para o SO"""
    if platform.system() == "Windows":
        return str(venv_path / "Scripts" / "python.exe")
    else:
        return str(venv_path / "bin" / "python")

def install_requirements(venv_path):
    """Instala depend√™ncias do projeto"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    pip_cmd = get_pip_command(venv_path)
    python_cmd = get_python_command(venv_path)
    requirements_file = Path(__file__).parent.parent / "requirements.txt"
    
    if not requirements_file.exists():
        print("   ‚ö†Ô∏è  requirements.txt n√£o encontrado. Criando arquivo base...")
        create_basic_requirements(requirements_file)
    
    # Atualiza pip (m√©todo compat√≠vel com Windows)
    try:
        if platform.system() == "Windows":
            # No Windows, usar python -m pip para evitar conflitos
            subprocess.run([python_cmd, "-m", "pip", "install", "--upgrade", "pip"], 
                         capture_output=True, text=True)
        else:
            subprocess.run([pip_cmd, "install", "--upgrade", "pip"], check=True)
        print("   ‚úì pip atualizado (ou j√° est√° atualizado)")
    except subprocess.CalledProcessError:
        print("   ‚ö†Ô∏è  N√£o foi poss√≠vel atualizar pip, continuando com vers√£o atual...")
    
    # Instala requirements
    try:
        print("   üì• Instalando pacotes (isso pode levar alguns minutos)...")
        
        # Instala pacotes em grupos para melhor controle de erro
        essential_packages = [
            "numpy>=1.21.0",
            "pandas>=1.3.0",
            "scikit-learn>=1.0.0",
            "matplotlib>=3.4.0"
        ]
        
        # Primeiro instala pacotes essenciais
        for package in essential_packages:
            try:
                subprocess.run([pip_cmd, "install", package], 
                             capture_output=True, text=True, check=True)
                print(f"   ‚úì {package.split('>=')[0]} instalado")
            except subprocess.CalledProcessError as e:
                print(f"   ‚ö†Ô∏è  Erro ao instalar {package}: continuando...")
        
        # Depois instala o resto do requirements
        result = subprocess.run([pip_cmd, "install", "-r", str(requirements_file)], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("   ‚úì Todas as depend√™ncias instaladas com sucesso!")
        else:
            print("   ‚ö†Ô∏è  Algumas depend√™ncias podem n√£o ter sido instaladas.")
            print("   üí° Voc√™ pode tentar instalar manualmente depois.")
            
    except Exception as e:
        print(f"   ‚ùå Erro inesperado: {e}")
        print("   üí° Tente instalar as depend√™ncias manualmente ap√≥s ativar o ambiente.")

def create_basic_requirements(requirements_file):
    """Cria arquivo requirements.txt b√°sico para projetos de ML card√≠aco"""
    basic_requirements = """# Core ML/DL
numpy>=1.21.0
pandas>=1.3.0
scikit-learn>=1.0.0
torch>=1.10.0
tensorflow>=2.7.0
xgboost>=1.5.0

# Data processing
scipy>=1.7.0
wfdb>=3.4.0  # Para dados ECG
pyedflib>=0.1.0  # Para arquivos EDF
biosppy>=0.7.0  # Processamento de sinais biom√©dicos
heartpy>=1.2.0  # An√°lise de frequ√™ncia card√≠aca

# Visualization
matplotlib>=3.4.0
seaborn>=0.11.0
plotly>=5.0.0

# ML utilities
optuna>=2.10.0  # Otimiza√ß√£o de hiperpar√¢metros
mlflow>=1.20.0  # Tracking de experimentos
wandb>=0.12.0  # Tracking alternativo

# Medical imaging (se aplic√°vel)
# opencv-python>=4.5.0
# pydicom>=2.2.0
# SimpleITK>=2.1.0

# Utils
tqdm>=4.62.0
pyyaml>=5.4.0
jupyter>=1.0.0
pytest>=6.2.0
black>=21.0.0
flake8>=3.9.0
"""
    
    with open(requirements_file, 'w') as f:
        f.write(basic_requirements)
    print(f"   ‚úì {requirements_file} criado")

def create_config_templates():
    """Cria templates de configura√ß√£o"""
    print("\n‚öôÔ∏è  Criando arquivos de configura√ß√£o...")
    
    base_dir = Path(__file__).parent.parent
    
    # Config de treinamento
    training_config = {
        "model": {
            "type": "cnn_lstm",
            "input_shape": [1000, 12],  # 1000 samples, 12 leads ECG
            "num_classes": 5,
            "architecture": {
                "cnn_filters": [32, 64, 128],
                "lstm_units": [128, 64],
                "dropout_rate": 0.3
            }
        },
        "training": {
            "batch_size": 32,
            "epochs": 100,
            "learning_rate": 0.001,
            "optimizer": "adam",
            "loss": "categorical_crossentropy",
            "metrics": ["accuracy", "auc"],
            "early_stopping": {
                "patience": 10,
                "monitor": "val_loss",
                "mode": "min"
            }
        },
        "data": {
            "train_split": 0.7,
            "val_split": 0.15,
            "test_split": 0.15,
            "sampling_rate": 500,
            "preprocessing": {
                "normalize": True,
                "remove_baseline": True,
                "filter_noise": True
            }
        }
    }
    
    config_file = base_dir / "configs" / "training" / "default_config.json"
    config_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(config_file, 'w') as f:
        json.dump(training_config, f, indent=4)
    print(f"   ‚úì {config_file.name} criado")
    
    # Config de modelo
    model_config = {
        "ecg_classifier": {
            "model_type": "hybrid_cnn_lstm",
            "input_specs": {
                "signal_length": 1000,
                "num_leads": 12,
                "sampling_rate": 500
            },
            "classes": [
                "Normal",
                "Atrial Fibrillation",
                "Myocardial Infarction",
                "Heart Failure",
                "Other Arrhythmia"
            ],
            "preprocessing": {
                "bandpass_filter": [0.5, 40],
                "notch_filter": 60,
                "normalize": "z-score"
            }
        }
    }
    
    model_config_file = base_dir / "configs" / "model" / "ecg_classifier.json"
    with open(model_config_file, 'w') as f:
        json.dump(model_config, f, indent=4)
    print(f"   ‚úì {model_config_file.name} criado")

def create_example_scripts():
    """Cria scripts de exemplo para treinamento"""
    print("\nüìù Criando scripts de exemplo...")
    
    train_script = '''#!/usr/bin/env python3
"""
Script de exemplo para treinamento de modelo de classifica√ß√£o ECG
"""

import json
import argparse
from pathlib import Path
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import mlflow

def load_config(config_path):
    """Carrega configura√ß√£o de treinamento"""
    with open(config_path, 'r') as f:
        return json.load(f)

def create_model(config):
    """Cria modelo baseado na configura√ß√£o"""
    # Implementar arquitetura do modelo aqui
    pass

def train_epoch(model, dataloader, criterion, optimizer):
    """Treina uma √©poca"""
    model.train()
    total_loss = 0
    # Implementar loop de treinamento
    return total_loss

def main():
    parser = argparse.ArgumentParser(description='Treinar modelo card√≠aco')
    parser.add_argument('--config', type=str, default='configs/training/default_config.json')
    parser.add_argument('--data', type=str, default='data/processed')
    parser.add_argument('--experiment', type=str, default='ecg_classification')
    args = parser.parse_args()
    
    # Carregar configura√ß√£o
    config = load_config(args.config)
    
    # Configurar MLflow
    mlflow.set_experiment(args.experiment)
    
    with mlflow.start_run():
        # Log par√¢metros
        mlflow.log_params(config['training'])
        
        # Criar modelo
        model = create_model(config['model'])
        
        # Treinar modelo
        print("üöÄ Iniciando treinamento...")
        # Implementar treinamento completo
        
        print("‚úÖ Treinamento conclu√≠do!")

if __name__ == "__main__":
    main()
'''
    
    train_file = Path(__file__).parent.parent / "scripts" / "train_model.py"
    with open(train_file, 'w') as f:
        f.write(train_script)
    print(f"   ‚úì train_model.py criado")

def create_activation_script():
    """Cria scripts de ativa√ß√£o do ambiente"""
    print("\nüîß Criando scripts de ativa√ß√£o...")
    
    base_dir = Path(__file__).parent.parent
    
    if platform.system() == "Windows":
        # Script PowerShell
        ps_script = f'''# Ativa ambiente virtual no Windows PowerShell
$venvPath = "{base_dir}\\venv\\Scripts\\Activate.ps1"
if (Test-Path $venvPath) {{
    & $venvPath
    Write-Host "‚úÖ Ambiente virtual ativado!" -ForegroundColor Green
    Write-Host "üìç Diret√≥rio do projeto: {base_dir}" -ForegroundColor Cyan
}} else {{
    Write-Host "‚ùå Ambiente virtual n√£o encontrado!" -ForegroundColor Red
    Write-Host "Execute primeiro: python scripts/setup_training.py" -ForegroundColor Yellow
}}
'''
        activate_file = base_dir / "activate_env.ps1"
        with open(activate_file, 'w') as f:
            f.write(ps_script)
        print(f"   ‚úì {activate_file.name} criado")
        
        # Script CMD
        cmd_script = f'''@echo off
REM Ativa ambiente virtual no Windows CMD
set VENV_PATH={base_dir}\\venv\\Scripts\\activate.bat
if exist "%VENV_PATH%" (
    call "%VENV_PATH%"
    echo ‚úÖ Ambiente virtual ativado!
    echo üìç Diret√≥rio do projeto: {base_dir}
) else (
    echo ‚ùå Ambiente virtual n√£o encontrado!
    echo Execute primeiro: python scripts/setup_training.py
)
'''
        cmd_file = base_dir / "activate_env.bat"
        with open(cmd_file, 'w') as f:
            f.write(cmd_script)
        print(f"   ‚úì {cmd_file.name} criado")

def print_next_steps():
    """Imprime pr√≥ximos passos"""
    print("\n" + "="*50)
    print("‚úÖ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("="*50)
    
    print("\nüìã Pr√≥ximos passos:")
    
    if platform.system() == "Windows":
        print("\n1. Ativar ambiente virtual:")
        print("   PowerShell: .\\activate_env.ps1")
        print("   CMD: activate_env.bat")
    else:
        print("\n1. Ativar ambiente virtual:")
        print("   source venv/bin/activate")
    
    print("\n2. Adicionar seus dados em: data/raw/")
    print("\n3. Ajustar configura√ß√µes em: configs/training/default_config.json")
    print("\n4. Executar treinamento:")
    print("   python scripts/train_model.py --config configs/training/default_config.json")
    
    print("\nüí° Dicas:")
    print("   - Use MLflow UI para acompanhar experimentos: mlflow ui")
    print("   - Logs de treinamento em: logs/training/")
    print("   - Modelos salvos em: models/trained/")

def main():
    """Fun√ß√£o principal"""
    print("üè• Cardio.AI.Pro - Setup de Ambiente de Treinamento")
    print("="*50)
    
    # Verifica√ß√µes
    check_python_version()
    
    # Setup
    create_directories()
    venv_path = create_venv()
    install_requirements(venv_path)
    create_config_templates()
    create_example_scripts()
    create_activation_script()
    
    # Finaliza√ß√£o
    print_next_steps()

if __name__ == "__main__":
    main()
